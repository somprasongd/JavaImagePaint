/*
 * AnnotationStampDialog.java
 *
 * Created on 23 พฤษภาคม 2551, 15:05 น.
 */
package annotation;

import com.github.somprasongd.java.paint.objects.AnnotationObject;
import com.github.somprasongd.java.paint.objects.AnnotationStampObject;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import com.github.somprasongd.java.paint.utils.ColorButton;
import com.github.somprasongd.java.paint.utils.StrokeChooserPanel;

/**
 *
 * @author  Somprasong Damyos AOA
 */
public class AnnotationStampDialog extends javax.swing.JDialog implements PropertyChangeListener {

    private AnnotationPaintPanel paintPanel;
    private Color textsColor = Color.BLACK;
    private Color bgsColor = Color.YELLOW;
    private Color brColor = Color.BLUE;
    private ColorButton textColor;
    private ColorButton bgColor;
    private ColorButton borderColor;
    private JLabel label;
    private StrokeChooserPanel stroke_obj;
    private static Stroke stroke_var = null;
    private JCheckBox jck;
    private JCheckBox jck3;
    private JCheckBox jck2;
    private Font font;
    private AnnotationFontChooserPanel fontChooser;
    private AnnotationFontChooserPanel fontChooserUpdate;
    private boolean isText;
    private boolean isDate;
    private boolean isImage;
    private boolean isThai = true;
    private boolean isEng = false;
    private boolean hasBorder = true;
    private boolean hasBackground = false;
    private boolean bgTransparent = false;
    private int selectedComboIndex;
    private DateFormat dateFormat;
    private Vector stamp_Vector = new Vector();
    private ImageIcon normalStampIcon;
    private final static File file = new File("jimgpnt.stampPattern");
    private File[] file_images;
    private String[] image_name;
    private Icon[] icon;
    private double strokeWidth;
    private String view_user;
    private String edit_user;
    private String del_user;
    private String owner_user;
    private URL[] url_stamp;

    public AnnotationStampDialog(AnnotationPaintPanel paintPanel, String view_user, String edit_user,
            String del_user, String owner_user, URL[] url_stamp) {
        super(null, DEFAULT_MODALITY_TYPE); // set donnt do anything else before close this dialog
        this.paintPanel = paintPanel;
        this.view_user = view_user;
        this.edit_user = edit_user;
        this.del_user = del_user;
        this.owner_user = owner_user;
        this.font = new Font("Angsana New", 0, 20);
        AnnotationStampDialog.stroke_var = new BasicStroke(1);
        this.strokeWidth = 1.0;
        loadStampPattern();
        this.url_stamp = url_stamp;

        //loadStampImage();
        if (this.url_stamp[0] != null) {
            loadStampImage(url_stamp);
        }else{
            image_name = new String[]{"ไม่มีรูป"};
        }
        initComponents();

        this.setLocationRelativeTo(null);
        this.show();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroup = new javax.swing.ButtonGroup();
        add_button = new javax.swing.JButton();
        del_button = new javax.swing.JButton();
        example_panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ex_label = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        colorChooser_Panel = new javax.swing.JPanel();
        colorbuttom_panel = new javax.swing.JPanel();
        stroke_panel = new javax.swing.JPanel();
        stroke_label = new javax.swing.JLabel();
        strokech_panel = new javax.swing.JPanel();
        chkbox_panel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        text_Radio = new javax.swing.JRadioButton("ข้อความ", true);
        text_Field = new javax.swing.JTextField();
        date_Radio = new javax.swing.JRadioButton();
        date_combobox = new javax.swing.JComboBox();
        image_Radio = new javax.swing.JRadioButton();
        font_Panel = new javax.swing.JPanel();
        dateFormat_Field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        image_combobox = new javax.swing.JComboBox(image_name);
        thai_chkbox = new javax.swing.JCheckBox();
        eng_chkbox = new javax.swing.JCheckBox();
        ok_button = new javax.swing.JButton();
        cancel_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        java.net.URL url = getClass().getClassLoader().getResource("annotation/graphics/stamp.gif");
        float f = 0.0F;
        normalStampIcon = new ImageIcon(url);
        ComponentOrientation componentorientation = ComponentOrientation.LEFT_TO_RIGHT;
        stamp_list = new javax.swing.JList(stamp_Vector);

        radioGroup.add(text_Radio);
        radioGroup.add(image_Radio);
        radioGroup.add(date_Radio);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("คุณสมบัติตราประทับ");
        setResizable(false);

        add_button.setText("เพิ่ม");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        del_button.setText("ลบ");
        del_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_buttonActionPerformed(evt);
            }
        });

        example_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("ตัวอย่าง"));

        jScrollPane2.setViewportView(ex_label);
        ex_label.setVerticalTextPosition(JLabel.BOTTOM);
        ex_label.setHorizontalTextPosition(JLabel.CENTER);
        ex_label.setHorizontalAlignment(JLabel.CENTER);

        javax.swing.GroupLayout example_panelLayout = new javax.swing.GroupLayout(example_panel);
        example_panel.setLayout(example_panelLayout);
        example_panelLayout.setHorizontalGroup(
            example_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );
        example_panelLayout.setVerticalGroup(
            example_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        colorChooser_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        colorChooser_Panel.setLayout(new javax.swing.BoxLayout(colorChooser_Panel, javax.swing.BoxLayout.Y_AXIS));

        colorbuttom_panel.setMaximumSize(new java.awt.Dimension(100, 100));
        colorbuttom_panel.setLayout(new javax.swing.BoxLayout(colorbuttom_panel, javax.swing.BoxLayout.Y_AXIS));
        colorChooser_Panel.add(colorbuttom_panel);
        textColor = new ColorButton(Color.BLACK, "สีข้อความ", null, "เลือกสีข้อความ", "textColor");
        textColor.addPropertyChangeListener(this);
        colorbuttom_panel.add(textColor, this.LEFT_ALIGNMENT);

        bgColor = new ColorButton(Color.YELLOW, "สีพื้นหลัง", null, "เลือกสีพื้นหลัง", "bgColor");
        bgColor.addPropertyChangeListener(this);
        colorbuttom_panel.add(bgColor,this.LEFT_ALIGNMENT);

        borderColor = new ColorButton(Color.BLUE, "สีเส้นขอบ", null, "เลือกสีเส้นขอบ", "borderColor");
        borderColor.addPropertyChangeListener(this);
        colorbuttom_panel.add(borderColor, this.LEFT_ALIGNMENT);

        stroke_panel.setMaximumSize(new java.awt.Dimension(32767, 30));
        stroke_panel.setPreferredSize(new java.awt.Dimension(100, 30));
        stroke_panel.setLayout(new java.awt.GridLayout(1, 2));

        stroke_label.setText("ขนาดเส้นขอบ");
        stroke_panel.add(stroke_label);
        stroke_panel.add(strokech_panel);
        stroke_obj = new StrokeChooserPanel(stroke_var, "stroke",this.strokeWidth);
        stroke_obj.addPropertyChangeListener(this);
        strokech_panel.add(stroke_obj, this.LEFT_ALIGNMENT);

        colorChooser_Panel.add(stroke_panel);

        chkbox_panel.setMaximumSize(new java.awt.Dimension(100, 100));
        chkbox_panel.setLayout(new javax.swing.BoxLayout(chkbox_panel, javax.swing.BoxLayout.Y_AXIS));
        colorChooser_Panel.add(chkbox_panel);
        jck3 = new JCheckBox("มีขอบ", true);
        colorChooser_Panel.add(jck3, this.LEFT_ALIGNMENT);
        jck3.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e){
                if (e.getStateChange() == e.SELECTED)
                hasBorder = true;
                else
                hasBorder = false;
            }
        } );

        jck = new JCheckBox("พื้นหลังโปร่งใส");
        colorChooser_Panel.add(jck, this.LEFT_ALIGNMENT);
        jck.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e){
                if (e.getStateChange() == e.SELECTED){
                    bgTransparent = true;
                    jck2.setSelected(false);
                }

                else
                bgTransparent = false;

            }
        } );
        jck2 = new JCheckBox("ไม่มีพื้นหลัง", true);
        colorChooser_Panel.add(jck2, this.LEFT_ALIGNMENT);
        jck2.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e){
                if (e.getStateChange() == e.SELECTED){
                    hasBackground = false;
                    jck.setSelected(false);
                }
                else
                hasBackground = true;
            }
        } );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        text_Radio.setText("ข้อความ");

        text_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_FieldActionPerformed(evt);
            }
        });

        date_Radio.setText("วันที่ และเวลา");

        date_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "เลือกรูปแบบ", "วันที่/เดือน/ปี", "วัน, เดือน วันที่, ปี", "วัน, วันที่ เดือน ปี", "เวลาแบบ  0-23" , "เวลาแบบ  1-12", "กำหนดเอง"}));
        date_combobox.setMaximumSize(new java.awt.Dimension(51, 18));
        date_combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                date_comboboxItemStateChanged(evt);
            }
        });
        date_combobox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                date_comboboxPropertyChange(evt);
            }
        });

        image_Radio.setText("รูปภาพ");

        font_Panel.setLayout(new java.awt.BorderLayout());

        dateFormat_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFormat_FieldActionPerformed(evt);
            }
        });

        jLabel1.setText("เลือกรูปแบบ");

        jLabel2.setText("กำหนดเอง");

        image_combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                image_comboboxItemStateChanged(evt);
            }
        });

        thai_chkbox.setText("ไทย");
        thai_chkbox.setSelected(isThai);
        thai_chkbox.setEnabled(false);

        eng_chkbox.setText("อังกฤษ");
        eng_chkbox.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(font_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(date_Radio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(thai_chkbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eng_chkbox))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(image_Radio)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(dateFormat_Field, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(image_combobox, javax.swing.GroupLayout.Alignment.LEADING, 0, 144, Short.MAX_VALUE)
                                    .addComponent(date_combobox, 0, 144, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(text_Radio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(text_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(font_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_Radio)
                    .addComponent(text_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_Radio)
                    .addComponent(thai_chkbox)
                    .addComponent(eng_chkbox))
                .addGap(7, 7, 7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(date_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFormat_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(image_Radio)
                    .addComponent(image_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        isText = true;
        date_combobox.setEnabled(false);
        RadioButtonHandler handler = new RadioButtonHandler();
        text_Radio.addItemListener( handler );
        image_Radio.addItemListener( handler );
        date_Radio.addItemListener( handler );
        fontChooser = new AnnotationFontChooserPanel(font, "font", 1);
        fontChooser.addPropertyChangeListener(this);

        font_Panel.add(fontChooser, BorderLayout.CENTER);

        font_Panel.setEnabled(false);
        dateFormat_Field.setEditable(false);
        image_combobox.setEnabled(false);
        if(image_name[0].equals("ไม่มีรูป")){
            image_Radio.setEnabled(false);
        }
        thai_chkbox.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e){
                if (e.getStateChange() == e.SELECTED){
                    isThai = true;
                    isEng = false;
                    eng_chkbox.setSelected(isEng);
                    setDateFormat(date_combobox.getSelectedIndex());
                }

            }
        } );
        eng_chkbox.addItemListener( new ItemListener() {
            public void itemStateChanged(ItemEvent e){
                if (e.getStateChange() == e.SELECTED){
                    isEng = true;
                    isThai = false;
                    thai_chkbox.setSelected(isThai);
                    setDateFormat(date_combobox.getSelectedIndex());
                }
            }
        } );

        ok_button.setText("ตกลง");
        ok_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_buttonActionPerformed(evt);
            }
        });

        cancel_button.setText("ยกเลิก");
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ok_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel_button))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorChooser_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(colorChooser_Panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel_button)
                    .addComponent(ok_button, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        stamp_list.setComponentOrientation(componentorientation);
        stamp_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                stamp_listValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(stamp_list);
        stamp_list.setVisibleRowCount(5);

        stamp_list.setCellRenderer(new StampCellRenderer());

        stamp_list.setSelectionMode(0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(del_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(add_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(example_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(add_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(del_button))
                    .addComponent(example_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        if(stamp_Vector.size() > 1)
        del_button.setEnabled(true);
        else
        del_button.setEnabled(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // add the stamp that user selected to the screen
    private void ok_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_buttonActionPerformed
        if (isText) {
            createStampObj(text_Field.getText());
        } else if (isImage) {
            paintPanel.addStampImage(url_stamp[image_combobox.getSelectedIndex()]);
        } else {
            int index = date_combobox.getSelectedIndex();
            if (dateFormat != null) {
                Date date = new Date();
                createStampObj(dateFormat.format(date).toString());
            } else {
                if (index == 6) {
                    createStampObj(dateFormat_Field.getText());
                }
            }
        }

        saveStampPattern();
        this.dispose();
}//GEN-LAST:event_ok_buttonActionPerformed

    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        this.dispose();
}//GEN-LAST:event_cancel_buttonActionPerformed

    private void date_comboboxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_date_comboboxPropertyChange

    }//GEN-LAST:event_date_comboboxPropertyChange

    //add the text that modified to stamp_list and it will save when user click OK button
    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        if (isText) {
            AnnotationStampObject textObj = new AnnotationStampObject(this.paintPanel, view_user, edit_user, del_user, owner_user,
                    font, textsColor, bgsColor, brColor, new Point((int) (30 / paintPanel.getZoom()),
                    (int) (30 / paintPanel.getZoom())), text_Field.getText(), paintPanel.isAntialiased(),
                    stroke_var, bgTransparent, hasBorder, hasBackground);

            stamp_Vector.addElement(textObj);
            stamp_list.setListData(stamp_Vector);
            stamp_list.setSelectedValue(textObj, true);
        }

        if (stamp_Vector.size() > 1) {
            del_button.setEnabled(true);
        }

}//GEN-LAST:event_add_buttonActionPerformed

    //delete stamp pattern from stamp_list
    private void del_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_buttonActionPerformed
        AnnotationStampObject stampobject = (AnnotationStampObject) stamp_list.getSelectedValue();
        int i = stamp_list.getSelectedIndex();
        int j = stamp_Vector.size();
        if (j == 1) {
            return;
        }
        stamp_Vector.remove(stampobject);
        stamp_list.setListData(stamp_Vector);
        if (i - 1 >= 0) {
            stamp_list.setSelectedIndex(i - 1);
        } else if (i == 0 && j > 1) {
            stamp_list.setSelectedIndex(i);
        }
        //else
        //theStamp = null;
        if (stamp_Vector.size() == 1) {
            del_button.setEnabled(false);
        }
}//GEN-LAST:event_del_buttonActionPerformed

    //show the current text in example_panel
    private void text_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_FieldActionPerformed
        showtext_inExamplePanle(text_Field.getText());   
    }//GEN-LAST:event_text_FieldActionPerformed

    //set all value that get from stamp pattern to text mode ex. font, color, border, etc.
    private void stamp_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_stamp_listValueChanged
        JList jlist = (JList) evt.getSource();

        AnnotationStampObject stampobject1 = (AnnotationStampObject) jlist.getSelectedValue();
        createPreviewLabel(stampobject1);
        AnnotationFontChooserPanel fontChoosers = null;
        StrokeChooserPanel stroke_objs = null;
        if (stampobject1 != null) {
            if (isText) {
                String str_text = stampobject1.getText();
                Font text_font = stampobject1.getFont();
                Color text_color = stampobject1.gettextColor();
                Color background_color = stampobject1.getBGColor();
                Color border_color = stampobject1.getBDColor();
                boolean has_Border = stampobject1.hasBoder();
                boolean has_Background = stampobject1.hasBackground();
                boolean is_BackgroundTransparent = stampobject1.isBackgroundTransparent();
                double width = (double) ((BasicStroke) stampobject1.getStroke()).getLineWidth();

                font = text_font;
                stroke_var = ((BasicStroke) stampobject1.getStroke());
                this.strokeWidth = width;
                stroke_objs = new StrokeChooserPanel(stroke_var, "stroke", this.strokeWidth);
                stroke_objs.addPropertyChangeListener(this);
                text_Field.setText(str_text);
                fontChooserUpdate = new AnnotationFontChooserPanel(font, "font", 1);
                fontChooserUpdate.addPropertyChangeListener(this);
                textColor.setColor(text_color);
                bgColor.setColor(background_color);
                borderColor.setColor(border_color);
                textsColor = text_color;
                bgsColor = background_color;
                brColor = border_color;
                if (has_Border) {
                    jck3.setSelected(true);
                } else {
                    jck3.setSelected(false);
                }
                if (has_Background) {
                    jck2.setSelected(false);
                } else {
                    jck2.setSelected(true);
                }
                if (is_BackgroundTransparent) {
                    jck.setSelected(true);
                } else {
                    jck.setSelected(false);
                }
            }
        }
        if (fontChooserUpdate != null) {
            font_Panel.remove(0);
            font_Panel.add(fontChooserUpdate, BorderLayout.CENTER);
            font_Panel.validate();
            font_Panel.repaint();
        }
        if (stroke_objs != null) {
            strokech_panel.remove(0);
            strokech_panel.add(stroke_objs);
            strokech_panel.validate();
            strokech_panel.repaint();
        }   
    }//GEN-LAST:event_stamp_listValueChanged

    // set date format when dateformat_combobox was changed by using method setDateFormat()
    private void date_comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_date_comboboxItemStateChanged
        int index = date_combobox.getSelectedIndex();
        setDateFormat(index);
    }//GEN-LAST:event_date_comboboxItemStateChanged

    // Show date format of user define in example_panel
    private void dateFormat_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFormat_FieldActionPerformed
        showtext_inExamplePanle(dateFormat_Field.getText());
    }//GEN-LAST:event_dateFormat_FieldActionPerformed

    // Show image that selected in the example_panel
    private void image_comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_image_comboboxItemStateChanged
        showImage_examplepanel();
        font_Panel.show();
        colorChooser_Panel.show();
        font_Panel.hide();
        colorChooser_Panel.hide();
    }//GEN-LAST:event_image_comboboxItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JButton cancel_button;
    private javax.swing.JPanel chkbox_panel;
    private javax.swing.JPanel colorChooser_Panel;
    private javax.swing.JPanel colorbuttom_panel;
    private javax.swing.JTextField dateFormat_Field;
    private javax.swing.JRadioButton date_Radio;
    private javax.swing.JComboBox date_combobox;
    private javax.swing.JButton del_button;
    private javax.swing.JCheckBox eng_chkbox;
    private javax.swing.JLabel ex_label;
    private javax.swing.JPanel example_panel;
    private javax.swing.JPanel font_Panel;
    private javax.swing.JRadioButton image_Radio;
    private javax.swing.JComboBox image_combobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton ok_button;
    private javax.swing.ButtonGroup radioGroup;
    private javax.swing.JList stamp_list;
    private javax.swing.JLabel stroke_label;
    private javax.swing.JPanel stroke_panel;
    private javax.swing.JPanel strokech_panel;
    private javax.swing.JTextField text_Field;
    private javax.swing.JRadioButton text_Radio;
    private javax.swing.JCheckBox thai_chkbox;
    // End of variables declaration//GEN-END:variables
    // set date format when dateformat_combobox was changed
    private void setDateFormat(int index) {
        if (index == 0) {
            dateFormat_Field.setText(" ");
            dateFormat_Field.setEditable(false);
            dateFormat = null;
            showtext_inExamplePanle(" ");
        } else if (index > 0 && index < 6) {

            if (index == 1) {
                if (isThai) {
                    dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                } else {
                    dateFormat = new SimpleDateFormat("dd/MM/yyyy", new Locale("en"));
                }
            } else if (index == 2) {
                if (isThai) {
                    dateFormat = new SimpleDateFormat("EEE, MMM d, ''yy");
                } else {
                    dateFormat = new SimpleDateFormat("EEE, MMM d, ''yy", new Locale("en"));
                }
            } else if (index == 3) {
                if (isThai) {
                    dateFormat = new SimpleDateFormat("EEE, d MMM yyyy");
                } else {
                    dateFormat = new SimpleDateFormat("EEE, d MMM yyyy", new Locale("en"));
                }
            } else if (index == 4) {
                if (isThai) {
                    dateFormat = new SimpleDateFormat("HH:mm");
                } else {
                    dateFormat = new SimpleDateFormat("HH:mm", new Locale("en"));
                }
            } else if (index == 5) {
                if (isThai) {
                    dateFormat = new SimpleDateFormat("h:mm a");
                } else {
                    dateFormat = new SimpleDateFormat("h:mm a", new Locale("en"));
                }
            }
        } else { // index = 6
            dateFormat_Field.setEditable(true);
            dateFormat = null;
            showtext_inExamplePanle(" ");
        }

        Date date = new Date();
        if (index > 0 && index < 6) {
            showtext_inExamplePanle(dateFormat.format(date).toString());
        }
    }

    //show selected image on example_panel
    private void showImage_examplepanel() {
        ex_label.setBackground(null);
        ex_label.setFont(null);
        ex_label.setText(null);
        ex_label.setForeground(null);
        ex_label.setBorder(null);
        ex_label.setIcon(icon[image_combobox.getSelectedIndex()]);
    }

    // show tect or date on example_panel
    private void showtext_inExamplePanle(String text) {
        if (!text.equals(" ")) {
            ex_label.setText(null);
            ex_label.setIcon(null);
            ex_label.setOpaque(true);
            if (hasBackground) {
                if (bgTransparent) {
                    ex_label.setBackground(new Color(bgsColor.getRed(), bgsColor.getGreen(), bgsColor.getBlue(), 70));
                } else {
                    ex_label.setBackground(new Color(bgsColor.getRed(), bgsColor.getGreen(), bgsColor.getBlue()));
                }
            } else {
                ex_label.setBackground(new Color(236, 233, 216));
            }
            ex_label.setFont(font);
            ex_label.setText(text);
            ex_label.setForeground(textsColor);
            if (hasBorder) {
                ex_label.setBorder(BorderFactory.createLineBorder(brColor, (int) ((BasicStroke) AnnotationStampDialog.stroke_var).getLineWidth()));
            }
        } else {
            ex_label.setText(null);
            ex_label.setIcon(null);
            ex_label.setOpaque(true);
            ex_label.setBackground(null);
            ex_label.setFont(null);
            ex_label.setText(null);
            ex_label.setForeground(null);
            ex_label.setBorder(null);

        }
    }

    //create new stamp object and add it into screen
    private void createStampObj(String texts) {
        if (!texts.equals("")) {
            AnnotationStampObject text = new AnnotationStampObject(this.paintPanel, view_user, edit_user, del_user, owner_user,
                    font, textsColor, bgsColor, brColor, new Point((int) (30 / paintPanel.getZoom()),
                    (int) (30 / paintPanel.getZoom())), texts, paintPanel.isAntialiased(), stroke_var,
                    bgTransparent, hasBorder, hasBackground);
            //text.setPanel(paintPanel);
            paintPanel.addStampObjects(text);
        }
    }

    //load stamp pattern from stamp pattern's file
    private void loadStampPattern() {
        try {
            BufferedReader buffRD = new BufferedReader(new FileReader(file));
            String temp;
            String arrStr[] = new String[21];
            int i, start, end;
            while ((temp = buffRD.readLine()) != null) {
                i = 0;
                start = 0;

                while (start != temp.length()) {
                    end = temp.indexOf('|', start);

                    if (end >= 0) {
                        arrStr[i] = temp.substring(start, end);
                        start = end + 1;
                        i++;
                    }
                }

                String nameObj = arrStr[5];
                Color text_Color = null;
                Color background_Color = null;
                Color border_Color = null;
                Point2D p2d = null;
                Stroke stroke_ = null;
                boolean antia = false;
                boolean bg_Transparent = false;
                boolean has_border = false;
                boolean has_background = false;
                float alphas = 0;
                Font fonts = null;
                String text = null;

                if (nameObj.equals("StampText")) {
                    fonts = new Font(arrStr[6], Integer.parseInt(arrStr[7]), Integer.parseInt(arrStr[8]));
                    text_Color = new Color(Integer.parseInt(arrStr[9]));
                    p2d = new Point2D.Double(Double.parseDouble(arrStr[10]), Double.parseDouble(arrStr[11]));
                    text = arrStr[12];
                    antia = Boolean.valueOf(arrStr[13]);
                    alphas = Float.parseFloat(arrStr[14]);

                    background_Color = new Color(Integer.parseInt(arrStr[15]));
                    border_Color = new Color(Integer.parseInt(arrStr[16]));
                    stroke_ = new BasicStroke(Float.parseFloat(arrStr[17]));
                    bg_Transparent = Boolean.valueOf(arrStr[18]);
                    has_border = Boolean.valueOf(arrStr[19]);
                    has_background = Boolean.valueOf(arrStr[20]);

                    AnnotationStampObject sTextNote = new AnnotationStampObject();
                    AnnotationObject copy = sTextNote.loadSText(this.paintPanel, null, null, null, null, fonts, text_Color, background_Color, border_Color, p2d, text, antia, alphas, stroke_, bg_Transparent, has_border, has_background);

                    stamp_Vector.addElement(copy);
                }
            }
            buffRD.close();
        } catch (IOException event) {
            System.out.println("not have this file yet");
        }
    }

    //save all stamp patern in stamp_list when user click ok button
    private void saveStampPattern() {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
            for (Iterator iterator = stamp_Vector.iterator(); iterator.hasNext();) {
                AnnotationObject paintObject = (AnnotationObject) iterator.next();
                bw.write(paintObject.getInfo());
                bw.write("\n");
            }
            bw.close();
        } catch (Exception e) {
            System.out.println("error at save stamp pattern");
            e.printStackTrace();
        }
    }

//   // load stamp images from stamp iamges' folder when open this dialog (.gif only)
//    private void loadStampImage(){
//        try {
//            //URL url_folder = this.getClass().getResource("images");
//            URL url_folder = new URL("file:///c:\\stamp_images"); 
//            File file_folder = new File (url_folder.toURI());
//            System.out.println("file_folder :" + file_folder );
//            // Define a filter for .gif image
//            FilenameFilter select = new FileListFilter("gif");
//            file_images = file_folder.listFiles(select);
//            String image_names[] = new String[file_images.length];
//            Icon icons[] = new Icon[file_images.length];
//            
//            for(int i =0; i< file_images.length; i++){
//                image_names[i] = file_images[i].getName();
//                icons[i] = new ImageIcon(file_images[i].toString());
//            }
//            image_name = image_names;
//            icon = icons;
//            
//        } catch (Exception ex) {
//            Logger.getLogger(AnnotationStampDialog.class.getName()).log(Level.SEVERE, null, ex);
//            
//        } 
//    }
    private void loadStampImage(URL[] url_stamp) {
        try {
            String image_names[] = new String[url_stamp.length];
            Icon icons[] = new Icon[url_stamp.length];

            for (int i = 0; i < url_stamp.length; i++) {
                String temp = url_stamp[i].getFile();
                int index = temp.lastIndexOf("/");
                image_names[i] = temp.substring(index + 1, temp.length());
                icons[i] = new ImageIcon(url_stamp[i]);
            }
            image_name = image_names;
            icon = icons;

        } catch (Exception ex) {
            Logger.getLogger(AnnotationStampDialog.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    private void createPreviewLabel(AnnotationStampObject stampobject) {
        if (stampobject == null) {
            return;
        } else {
            ex_label.setText(null);
            ex_label.setIcon(null);
            ex_label.setOpaque(true);

            if (stampobject.hasBackground()) {
                if (stampobject.isBackgroundTransparent()) {
                    ex_label.setBackground(new Color(stampobject.getBGColor().getRed(), stampobject.getBGColor().getGreen(), stampobject.getBGColor().getBlue(), 70));
                } else {
                    ex_label.setBackground(new Color(stampobject.getBGColor().getRed(), stampobject.getBGColor().getGreen(), stampobject.getBGColor().getBlue()));
                }
            } else {
                ex_label.setBackground(new Color(236, 233, 216));
            }

            ex_label.setFont(stampobject.getFont());
            ex_label.setText(stampobject.getText());
            ex_label.setForeground(stampobject.gettextColor());

            if (stampobject.hasBoder()) {
                ex_label.setBorder(BorderFactory.createLineBorder(stampobject.getBDColor(), (int) ((BasicStroke) stampobject.getStroke()).getLineWidth()));
            }
        }
    }

    //set new value to font, color_button and etc. when they were changed
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("font")) {
            font = (Font) evt.getNewValue();
        }

        if (evt.getPropertyName().equals("textColor")) {
            textsColor = (Color) evt.getNewValue();
        }

        if (evt.getPropertyName().equals("bgColor")) {
            bgsColor = (Color) evt.getNewValue();
        }

        if (evt.getPropertyName().equals("borderColor")) {
            brColor = (Color) evt.getNewValue();
        }

        if (evt.getPropertyName().equals("stroke")) {
            stroke_var = (Stroke) evt.getNewValue();
        }
    }

    class RadioButtonHandler implements ItemListener {

        public void itemStateChanged(ItemEvent e) {
            if (e.getSource() == text_Radio) {
                // set bank Image Examble
                showtext_inExamplePanle(" ");

                // text mode enable
                isText = true;
                text_Field.setEditable(true);
                stamp_list.setEnabled(true);

                // image and date modes are disable
                isImage = false;
                image_combobox.setEnabled(false);

                isDate = false;
                thai_chkbox.setEnabled(false);
                eng_chkbox.setEnabled(false);
                date_combobox.setEnabled(false);
                dateFormat_Field.setEditable(false);

                font_Panel.show();
                colorChooser_Panel.show();
            } else if (e.getSource() == date_Radio) {
                // set bank Image Examble
                showtext_inExamplePanle(" ");

                // date mode enable
                isDate = true;
                thai_chkbox.setEnabled(true);
                eng_chkbox.setEnabled(true);
                date_combobox.setEnabled(true);
                date_combobox.setSelectedIndex(0);
                dateFormat_Field.setEditable(false);

                // image and text modes are disable
                isText = false;
                text_Field.setText("");
                text_Field.setEditable(false);
                stamp_list.setEnabled(false);

                isImage = false;
                image_combobox.setEnabled(false);

                font_Panel.show();
                colorChooser_Panel.show();
            } else if (e.getSource() == image_Radio) {
                // image mode enable
                isImage = true;
                image_combobox.setEnabled(true);
                showImage_examplepanel();

                // text mode disable all 
                isText = false;
                text_Field.setText("");
                text_Field.setEditable(false);
                stamp_list.setEnabled(false);

                // date mode disable all
                isDate = false;
                date_combobox.setEnabled(false);
                thai_chkbox.setEnabled(false);
                eng_chkbox.setEnabled(false);
                dateFormat_Field.setEditable(false);

                font_Panel.hide();
                colorChooser_Panel.hide();
            }
        }
    } // end of RadioButtonHandler class

    class StampCellRenderer extends JLabel implements ListCellRenderer {

        public Component getListCellRendererComponent(JList jlist, Object obj, int i, boolean flag, boolean flag1) {

            AnnotationStampObject stampobject = (AnnotationStampObject) obj;
            setOpaque(true);
            setText(stampobject.getText());
            setIcon(normalStampIcon);
            if (flag) {
                setBackground(SystemColor.textHighlight);
                setForeground(SystemColor.textHighlightText);
            } else {
                setBackground(SystemColor.text);
                setForeground(SystemColor.textText);
            }
            LineBorder lineborder = new LineBorder(SystemColor.textHighlightText, 1);
            EmptyBorder emptyborder = new EmptyBorder(1, 1, 1, 1);
            if (flag1) {
                setBorder(lineborder);
            } else {
                setBorder(emptyborder);
            }
            return this;
        }

        protected StampCellRenderer() {

        }
    }  //end of StampCellRenderer class

    class FileListFilter implements FilenameFilter {

        private String extension;

        public FileListFilter(String extension) {
            this.extension = extension;
        }

        public boolean accept(File directory, String filename) {
            boolean fileOK = true;
            if (extension != null) {
                fileOK &= filename.endsWith('.' + extension);
            }
            return fileOK;
        }
    } //end of  FileListFilter class
} // end of AnnotationStampDialog class
